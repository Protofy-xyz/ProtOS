{
    "name": "chatGPT",
    "icon": "openai",
    "layouts": {
        "lg": [
            {
                "w": 4,
                "h": 19,
                "x": 0,
                "y": 4,
                "i": "action_1750256774576",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 4,
                "h": 19,
                "x": 4,
                "y": 4,
                "i": "value_1750256790295",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 8,
                "h": 4,
                "x": 0,
                "y": 0,
                "i": "value_1750261498829",
                "moved": false,
                "static": false,
                "isResizable": true
            }
        ],
        "md": [
            {
                "w": 3,
                "h": 16,
                "x": 0,
                "y": 4,
                "i": "action_1750256774576",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 3,
                "h": 16,
                "x": 3,
                "y": 4,
                "i": "value_1750256790295",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 6,
                "h": 4,
                "x": 0,
                "y": 0,
                "i": "value_1750261498829",
                "moved": false,
                "static": false,
                "isResizable": true
            }
        ],
        "sm": [
            {
                "w": 1,
                "h": 11,
                "x": 0,
                "y": 4,
                "i": "action_1750256774576",
                "moved": false,
                "static": false
            },
            {
                "w": 1,
                "h": 12,
                "x": 0,
                "y": 15,
                "i": "value_1750256790295",
                "moved": false,
                "static": false
            },
            {
                "w": 1,
                "h": 4,
                "x": 0,
                "y": 0,
                "i": "value_1750261498829",
                "moved": false,
                "static": false
            }
        ]
    },
    "cards": [
        {
            "key": "action_1750256774576",
            "width": 2,
            "height": 6,
            "icon": "openai",
            "html": "\n// data contains: data.icon, data.color, data.name, data.params\nreturn card({\n    content: `\n        ${icon({ name: data.icon, color: data.color, size: '48' })}\n        ${cardAction({ data })}\n    `\n});\n",
            "name": "Send message",
            "color": "#74AA9C",
            "description": "send a message to chatGPT",
            "rulesCode": "return execute_action(\"/api/v1/chatgpt/send/prompt\", { message: userParams.message});",
            "params": {
                "message": "message"
            },
            "type": "action",
            "displayResponse": false
        },
        {
            "key": "value_1750256790295",
            "width": 2,
            "height": 6,
            "icon": "openai",
            "html": "\n                //data contains: data.value, data.icon and data.color\n                return card({\n                    content: `\n                    ${cardValue({ value: data.value, style: \"font-size: 20px; font-weight: 400; margin-top: 10px\" })}\n                    `\n                });\n                ",
            "name": "Message response",
            "color": "#74AA9C",
            "description": "chatGPT last chat response",
            "rulesCode": "return states?.chatGPT?.conversation?.chatResponse",
            "type": "value"
        },
        {
            "key": "value_1750261498829",
            "width": 4,
            "height": 4,
            "icon": "key",
            "html": "\nreactCard(`\n  async function validarOpenAIKey(apiKey) {\n    const res = await fetch('https://api.openai.com/v1/models', {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer '+apiKey,\n      }\n    });\n\n    if (!res.ok) {\n      const error = await res.json().catch(() => ({}));\n      const message = error?.error?.message || 'HTTP '+res.status;\n      return message\n    }\n\n    return true;\n  }\n\n  function Widget() {\n    return (\n          <View className=\"no-drag\">\n            <KeySetter\n              nameKey={data.params.nameKey}\n              validate={validarOpenAIKey}\n              onAdd={(key) => {\n                settings.set('ai.provider', 'openai')\n                settings.set('ai.enabled', true)\n              }}\n              onRemove={(key) => {\n                settings.del('ai.provider')\n                settings.del('ai.enabled')\n              }}\n            />\n          </View>\n    );\n  }\n\n`, data.domId)\n\n\n            ",
            "name": "Key Setter",
            "description": "Displays a key setter for a specific key or in case already set displays key is set",
            "type": "value",
            "rulesCode": "",
            "params": {
                "nameKey": "OPENAI_API_KEY"
            }
        }
    ],
    "autopilot": false,
    "rules": [
        
    ]
}